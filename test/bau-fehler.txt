Debugger entered--Lisp error: (wrong-type-argument integer-or-marker-p nil)
  goto-char(nil)
  (cond ((and left right) (goto-char ep) (delete-char -1) (goto-char ap) (delete-char 1)) (right (goto-char ep) (delete-char -1)) (left (goto-char ap) (delete-char 1)) (t (goto-char ep) (delete-char -1) (goto-char ap) (delete-char 1)))
  ar-th-trim-base(nil nil nil nil)
  (let* ((bounds (ar-th-bounds thing)) (ap (car bounds)) (ep (cdr bounds))) (ar-th-trim-base ap ep left right))
  ar-th-trim(braced)
  funcall(ar-th-trim braced)
  (let* ((x (funcall th-function thing-1th))) (if (member x erg) erg (setq erg (cons x erg))))
  (while (and (not (eobp)) (progn (ar-th-forward thing-1th 1 iact t) (< orig (point)))) (setq orig (point)) (let* ((x (funcall th-function thing-1th))) (if (member x erg) erg (setq erg (cons x erg)))) (if (< (point) (match-end 0)) (progn (goto-char (match-end 0)))))
  (if (eq th-function (quote ar-th-sort)) (ar-th-sort thing-1th nil beg end nil nil nil) (while (and (not (eobp)) (progn (ar-th-forward thing-1th 1 iact t) (< orig (point)))) (setq orig (point)) (let* ((x (funcall th-function thing-1th))) (if (member x erg) erg (setq erg (cons x erg)))) (if (< (point) (match-end 0)) (progn (goto-char (match-end 0))))))
  (save-restriction (narrow-to-region beg end) (goto-char beg) (if (eq th-function (quote ar-th-sort)) (ar-th-sort thing-1th nil beg end nil nil nil) (while (and (not (eobp)) (progn (ar-th-forward thing-1th 1 iact t) (< orig (point)))) (setq orig (point)) (let* ((x (funcall th-function thing-1th))) (if (member x erg) erg (setq erg (cons x erg)))) (if (< (point) (match-end 0)) (progn (goto-char (match-end 0)))))))
  (save-excursion (save-restriction (narrow-to-region beg end) (goto-char beg) (if (eq th-function (quote ar-th-sort)) (ar-th-sort thing-1th nil beg end nil nil nil) (while (and (not (eobp)) (progn (ar-th-forward thing-1th 1 iact t) (< orig (point)))) (setq orig (point)) (let* ((x (funcall th-function thing-1th))) (if (member x erg) erg (setq erg (cons x erg)))) (if (< (point) (match-end 0)) (progn (goto-char (match-end 0))))))))
  (let* ((beg (cond (beg-2th beg-2th) ((use-region-p) (region-beginning)))) (end (cond (end-2th end-2th) ((use-region-p) (copy-marker (region-end))))) (orig beg) bounds erg res) (if (and beg end) nil (setq bounds (ar-th-bounds thing-2th t)) (setq beg (car bounds)) (setq end (copy-marker (cdr bounds))) (setq orig beg)) (save-excursion (save-restriction (narrow-to-region beg end) (goto-char beg) (if (eq th-function (quote ar-th-sort)) (ar-th-sort thing-1th nil beg end nil nil nil) (while (and (not (eobp)) (progn (ar-th-forward thing-1th 1 iact t) (< orig ...))) (setq orig (point)) (let* ((x ...)) (if (member x erg) erg (setq erg ...))) (if (< (point) (match-end 0)) (progn (goto-char ...))))))) erg)
  ar-thing-in-thing(braced doublequoted ar-th-trim nil)
  ar-trim-braced-in-doublequoted-atpt()
  (let (le1 le2 le3) (set-buffer (get-buffer-create "trim-braces-in-doublequotes TEST")) (switch-to-buffer "trim-braces-in-doublequotes TEST") (erase-buffer) (emacs-lisp-mode) (insert ar-th-emacs-lisp-test-string) (goto-char 9) (save-excursion (ar-doublequote-defun-atpt)) (progn (or #1=(ar-in-doublequoted-p-atpt) (cl--assertion-failed (quote #1#))) . #3=(nil)) (load (expand-file-name "~/werkstatt/thing-at-point-utils/thingatpt-delimited-list-in-unpaired-delimited-list.el") nil t) (setq le1 (ar-length-of-doublequoted-atpt)) (ar-brace-alnum-in-doublequoted-atpt) (progn (or #2=(< le1 (setq le2 (ar-length-of-doublequoted-atpt))) (cl--assertion-failed (quote #2#))) . #3#) (ar-doublebackslashparen-braced-in-doublequoted-atpt) (progn (or #4=(< le2 (setq le3 (ar-length-of-doublequoted-atpt))) (cl--assertion-failed (quote #4#))) . #3#) (ar-trim-braced-in-doublequoted-atpt) (progn (or #5=(< (ar-length-of-doublequoted-atpt) 68) (cl--assertion-failed (quote #5#))) . #3#))
  ar-test-trim-braces-in-doublequotes-intern(nil)
  ar-test-trim-braces-in-doublequotes-atpt()
  (let ((thing-mark-region nil) (thing-copy-region nil) (oldbuf (current-buffer))) (message "%s %s" "th-delimtest start" (time-stamp-string)) (ar-th-delimtest th-test-delay) (message "%s %s" "th-mv-test start" (time-stamp-string)) (ar-th-mv-test arg) (switch-to-buffer oldbuf) (message "%s %s" "th-test start" (time-stamp-string)) (ar-th-test) (message "%s %s" "ar-th-markup-test start" (time-stamp-string)) (ar-th-markup-test) (message "%s %s" "ar-th-delimit-tests start" (time-stamp-string)) (ar-th-delimit-tests) (message "%s %s" "ar-th-string-strip-test start" (time-stamp-string)) (ar-th-string-strip-test) (message "%s %s" "ar-test-trim-braces-in-doublequotes-atpt start" (time-stamp-string)) (ar-test-trim-braces-in-doublequotes-atpt) (message "%s %s" "ar-th-sort-test start" (time-stamp-string)) (ar-th-sort-test))
  ar-th-do-tests()
  (cond ((eq 1 arg) (ar-th-write-grundlagen) (ar-th-do-tests) (message "thing-in-thing nicht neu geschrieben!") (base-el)) ((eq 2 arg) (ar-th-write-grundlagen) (ar-thing-in-thing-anlegen)) ((eq 3 arg) (ar-th-write-grundlagen) (ar-thing-in-thing-anlegen) (sit-for 1) (ar-th-do-tests) (base-el)) ((eq 4 arg) (ar-th-write-grundlagen) (message "%s" "Ohne thing-in-thing geschrieben, keine Tests!")) (5 (ar-th-write-grundlagen) (ar-thingatpt-buffer-prepare (list (quote thing-in-thing\.el))) (ar-thing-in-thing-anlegen) (ar-th-write-intern (list (quote thing-in-thing\.el))) (ar-th-do-tests) (base-el)))
  ar-th-write(1)
  funcall-interactively(ar-th-write 1)
  call-interactively(ar-th-write record nil)
  command-execute(ar-th-write record)
  execute-extended-command(nil "ar-th-write" "ar-th-write")
  funcall-interactively(execute-extended-command nil "ar-th-write" "ar-th-write")
  call-interactively(execute-extended-command nil nil)
  command-execute(execute-extended-command)
